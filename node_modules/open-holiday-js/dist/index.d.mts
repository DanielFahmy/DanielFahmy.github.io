interface HolidayOptions {
    url?: string;
}
/**
 * Represents an SDK for interacting with the Open Holiday API.
 */
declare class Holiday {
    /**
     * The base URL of the Open Holiday API.
     * This won't have a slash at the end!
     */
    url: string;
    /**
     * Constructs a new instance of the Holiday SDK.
     * @param {HolidayOptions} options - The options for configuring the SDK.
     * @param {string} options.url - The base URL of the Open Holiday API; defaults to `https://openholidaysapi.org`
     */
    constructor({ url }?: HolidayOptions);
    /**
     * Get all countries
     *
     * [Official docs](https://www.openholidaysapi.org/en/#countries)
     *
     * @param language The optional language to get the country names in.
     *                 If a incorrect is given the data will be in english.
     *                 If no language is given the data will be in all available languages.
     *
     * @returns A promise that resolves in all countries supported.
     */
    getCountries(language?: string): Promise<{
        isoCode: string;
        name: {
            language: string;
            text: string;
        }[];
        officialLanguages: string[];
    }[]>;
    /**
     * Get all languages
     *
     * @param language The optional language to get the languages names in.
     *                 If a incorrect is given the data will be in english.
     *                 If no language is given the data will be in all available languages.
     *
     * @returns A promise that resolves in all langauges supported.
     */
    getLangs(language?: string): Promise<{
        isoCode: string;
        name: {
            language: string;
            text: string;
        }[];
    }[]>;
    /**
     * Get all subdivisions in a state
     *
     * [Official docs](https://www.openholidaysapi.org/en/#subdivisions)
     *
     * @param country The iso-code of the country which subdivisions are in question
     * @param language The language in which to receive the subdivison names
     * @returns A promise that resolves into a list of all subdivions that are important for holidays
     */
    getSubdivisions(country: string, language?: string): Promise<{
        code: string;
        isoCode: string;
        name: {
            language: string;
            text: string;
        }[];
        officialLanguages: string[];
        shortName: string;
        category: {
            language: string;
            text: string;
        }[];
    }[]>;
    /**
     * Get school holidays
     *
     * [Official docs](https://www.openholidaysapi.org/en/public-holidays)
     *
     * @param country - The iso code of the country
     * @param startDate - The date to beginn the search from
     * @param endDate - The date to end the search at, maximum three years after startDate
     * @param subdivision - Optional administrative unit
     * @param language - The optional language to get all the data in
     *
     * @returns A promise that resolves into the public holidays
     */
    getPublicHolidays(country: string, startDate: Date, endDate: Date, subdivision?: string, language?: string): Promise<{
        startDate: Date;
        endDate: Date;
        type: "Public" | "Bank" | "National" | "Regional" | "Local" | "School" | "BackToSchool" | "EndOfLessons";
        name: {
            language: string;
            text: string;
        }[];
        id: string;
        nationwide: boolean;
        subdivisions?: {
            code: string;
            shortName: string;
        }[] | undefined;
        quality?: "Mandatory" | "Optional" | undefined;
        comment?: {
            language: string;
            text: string;
        }[] | undefined;
    }[]>;
    /**
     * Get school holidays
     *
     * [Official docs](https://www.openholidaysapi.org/en/#school-holidays)
     *
     * @param country - The iso code of the country
     * @param startDate - The date to beginn the search from
     * @param endDate - The date to end the search at, maximum three years after startDate
     * @param subdivision - Optional administrative unit
     * @param language - The optional language to get all the data in
     *
     * @returns A promise that resolves into the school holidays
     */
    getSchoolHolidays(country: string, startDate: Date, endDate: Date, subdivision?: string, language?: string): Promise<{
        startDate: Date;
        endDate: Date;
        type: "Public" | "Bank" | "National" | "Regional" | "Local" | "School" | "BackToSchool" | "EndOfLessons";
        name: {
            language: string;
            text: string;
        }[];
        id: string;
        nationwide: boolean;
        subdivisions?: {
            code: string;
            shortName: string;
        }[] | undefined;
        quality?: "Mandatory" | "Optional" | undefined;
        comment?: {
            language: string;
            text: string;
        }[] | undefined;
    }[]>;
}

export { Holiday };
