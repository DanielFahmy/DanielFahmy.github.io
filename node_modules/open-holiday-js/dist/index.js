"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Holiday: () => Holiday
});
module.exports = __toCommonJS(src_exports);

// src/schemas/country.ts
var import_zod2 = require("zod");

// src/schemas/utils.ts
var import_zod = require("zod");
var isCode = (code) => /^[A-Z]{2}$/.test(code);
var isDate = (string) => /^\d{4}-\d{2}-\d{2}$/.test(string);
var nameSchema = import_zod.z.object({
  language: import_zod.z.string().refine(isCode),
  text: import_zod.z.string()
});

// src/schemas/country.ts
var countrySchema = import_zod2.z.object({
  isoCode: import_zod2.z.string().refine(isCode),
  name: import_zod2.z.array(nameSchema),
  officialLanguages: import_zod2.z.array(import_zod2.z.string().refine(isCode))
});
var countryApiResponse = import_zod2.z.array(countrySchema);

// src/schemas/holidays.ts
var import_zod3 = require("zod");
var holidayType = import_zod3.z.union([
  import_zod3.z.literal("Public"),
  import_zod3.z.literal("Bank"),
  import_zod3.z.literal("National"),
  import_zod3.z.literal("Regional"),
  import_zod3.z.literal("Local"),
  import_zod3.z.literal("School"),
  import_zod3.z.literal("BackToSchool"),
  import_zod3.z.literal("EndOfLessons")
]);
var holidaySchema = import_zod3.z.object({
  id: import_zod3.z.string().min(1),
  startDate: import_zod3.z.string().refine(isDate),
  endDate: import_zod3.z.string().refine(isDate),
  type: holidayType,
  name: import_zod3.z.array(nameSchema),
  nationwide: import_zod3.z.boolean(),
  subdivisions: import_zod3.z.optional(
    import_zod3.z.array(
      import_zod3.z.object({
        code: import_zod3.z.string().min(1),
        shortName: import_zod3.z.string().min(1)
      })
    )
  ),
  quality: import_zod3.z.optional(import_zod3.z.union([import_zod3.z.literal("Mandatory"), import_zod3.z.literal("Optional")])),
  comment: import_zod3.z.optional(import_zod3.z.array(nameSchema))
});
var holidayApiResponse = import_zod3.z.array(holidaySchema);

// src/schemas/languages.ts
var import_zod4 = require("zod");
var languageSchema = import_zod4.z.object({
  isoCode: import_zod4.z.string().refine(isCode),
  name: import_zod4.z.array(nameSchema)
});
var languagesApiResponse = import_zod4.z.array(languageSchema);

// src/schemas/subdivisions.ts
var import_zod5 = require("zod");
var subdivisionSchema = import_zod5.z.object({
  code: import_zod5.z.string().min(1),
  isoCode: import_zod5.z.string(),
  shortName: import_zod5.z.string().min(1),
  category: import_zod5.z.array(nameSchema),
  name: import_zod5.z.array(nameSchema),
  officialLanguages: import_zod5.z.array(import_zod5.z.string().refine(isCode))
});
var subdivisionsApiResponse = import_zod5.z.array(subdivisionSchema);

// src/utils/date.ts
var stringifyDate = (date) => {
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  return `${year}-${month}-${day}`;
};
var parseDate = (date) => {
  const [year, month, day] = date.split("-").map((n) => parseInt(n));
  return new Date(year, month - 1, day);
};

// src/utils/request.ts
function requestJson(url, schema) {
  return __async(this, null, function* () {
    const raw = yield fetch(url, { headers: { "accept": "text/json" } });
    if (!raw.ok)
      throw new Error(`Request was not successful (${raw.status})`);
    const unparsedContent = yield raw.json();
    return schema.parse(unparsedContent);
  });
}

// src/utils/url.ts
var serializeUrl = (url) => {
  const endsWithSlash = url.endsWith("/");
  if (endsWithSlash)
    return url.slice(0, -1);
  return url;
};
var createLangQuery = (language, isFirstParam = true) => {
  const param = language ? `languageIsoCode=${language.toUpperCase()}` : "";
  if (isFirstParam)
    return "?" + param;
  return param;
};

// src/index.ts
var Holiday = class {
  /**
   * Constructs a new instance of the Holiday SDK.
   * @param {HolidayOptions} options - The options for configuring the SDK.
   * @param {string} options.url - The base URL of the Open Holiday API; defaults to `https://openholidaysapi.org`
   */
  constructor({ url } = {}) {
    this.url = serializeUrl(url || "https://openholidaysapi.org");
  }
  /**
   * Get all countries
   *
   * [Official docs](https://www.openholidaysapi.org/en/#countries)
   *
   * @param language The optional language to get the country names in.
   *                 If a incorrect is given the data will be in english.
   *                 If no language is given the data will be in all available languages.
   *
   * @returns A promise that resolves in all countries supported.
   */
  getCountries(language) {
    const param = createLangQuery(language);
    const url = `${this.url}/Countries${param}`;
    return requestJson(url, countryApiResponse);
  }
  /**
   * Get all languages
   *
   * @param language The optional language to get the languages names in.
   *                 If a incorrect is given the data will be in english.
   *                 If no language is given the data will be in all available languages.
   *
   * @returns A promise that resolves in all langauges supported.
   */
  getLangs(language) {
    const param = createLangQuery(language);
    const url = `${this.url}/Languages${param}`;
    return requestJson(url, languagesApiResponse);
  }
  /**
   * Get all subdivisions in a state
   *
   * [Official docs](https://www.openholidaysapi.org/en/#subdivisions)
   *
   * @param country The iso-code of the country which subdivisions are in question
   * @param language The language in which to receive the subdivison names
   * @returns A promise that resolves into a list of all subdivions that are important for holidays
   */
  getSubdivisions(country, language) {
    const langParam = createLangQuery(language, false);
    const countryParam = `countryIsoCode=${country}`;
    const params = `?${langParam}&${countryParam}`;
    const url = `${this.url}/Subdivisions${params}`;
    return requestJson(url, subdivisionsApiResponse);
  }
  /**
   * Get school holidays
   *
   * [Official docs](https://www.openholidaysapi.org/en/public-holidays)
   *
   * @param country - The iso code of the country
   * @param startDate - The date to beginn the search from
   * @param endDate - The date to end the search at, maximum three years after startDate
   * @param subdivision - Optional administrative unit
   * @param language - The optional language to get all the data in
   *
   * @returns A promise that resolves into the public holidays
   */
  getPublicHolidays(country, startDate, endDate, subdivision, language) {
    return __async(this, null, function* () {
      const paramsArray = [
        createLangQuery(language, false),
        subdivision ? `subdivisionCode=${subdivision}` : "",
        `validFrom=${stringifyDate(startDate)}`,
        `validTo=${stringifyDate(endDate)}`,
        `countryIsoCode=${country}`
      ].filter((s) => s);
      const params = `?${paramsArray.join("&")}`;
      const url = `${this.url}/PublicHolidays${params}`;
      const data = yield requestJson(url, holidayApiResponse);
      const jsNative = data.map((d) => __spreadProps(__spreadValues({}, d), {
        startDate: parseDate(d.startDate),
        endDate: parseDate(d.endDate)
      }));
      return jsNative;
    });
  }
  /**
   * Get school holidays
   *
   * [Official docs](https://www.openholidaysapi.org/en/#school-holidays)
   *
   * @param country - The iso code of the country
   * @param startDate - The date to beginn the search from
   * @param endDate - The date to end the search at, maximum three years after startDate
   * @param subdivision - Optional administrative unit
   * @param language - The optional language to get all the data in
   *
   * @returns A promise that resolves into the school holidays
   */
  getSchoolHolidays(country, startDate, endDate, subdivision, language) {
    return __async(this, null, function* () {
      const paramsArray = [
        createLangQuery(language, false),
        subdivision ? `subdivisionCode=${subdivision}` : "",
        `validFrom=${stringifyDate(startDate)}`,
        `validTo=${stringifyDate(endDate)}`,
        `countryIsoCode=${country}`
      ].filter((s) => s);
      const params = `?${paramsArray.join("&")}`;
      const url = `${this.url}/SchoolHolidays${params}`;
      const data = yield requestJson(url, holidayApiResponse);
      const jsNative = data.map((d) => __spreadProps(__spreadValues({}, d), {
        startDate: parseDate(d.startDate),
        endDate: parseDate(d.endDate)
      }));
      return jsNative;
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Holiday
});
